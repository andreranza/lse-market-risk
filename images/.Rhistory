flat <- subset(yield, yield$FLAT == 1)
extreme_flat <- flat[sample(index(flat),1),1:11]
df_2 <- cbind(t(extreme_inverted), t(extreme_upward), t(extreme_flat))
row.names(df_2) <- colnames(X)
df_2
str(df_2)
df_3 <- stack(list("2006-11-28" = df_2[,1], "2010-01-11" = df_2[,2], "2007-07-24" = df_2[,3]))
colnames(df_3) <- c("Yield", "Day")
df_3$Maturity <- colnames(X)
df_3
ggplot(df_3, aes(x = Maturity, y = Yield, colour = Day, group = Day)) +
geom_line() +
scale_x_discrete(limits = colnames(X)) +
geom_point() +
labs(x = "Time to Maturity", y = "Yield (%)")
rm(list = ls())
options(scipen = 5)
library(Quandl)
library(quantmod)
library(stringr)
library(highcharter)
library(xts)
library(ggplot2)
getwd()
Quandl.api_key("GUrWGm_WBRvxKPUUTCcZ")
X <- Quandl("USTREASURY/YIELD", type = "xts")
# remove 2 MO and start from 2006 where 30 MO is reintroduced
X <- na.omit(X["2006-02-09/",-2])
head(X)
dates <- index(X)
symbols <- colnames(X)
symbols <- lapply(symbols, str_replace, patter = " ", repl = "")
symbols_2 <- NULL
for(i in symbols) {
symbols_2 <- c(symbols_2, paste("MAT", i, sep = ""))
}
#symbols <- lapply(symbols_2, str_replace, patter = " ", repl = "")
symbols <- as.vector(unlist(symbols))
dimnames(X)[[2]] <- symbols
colnames(X)
highchart(type = "stock") %>%
hc_title(text = "Daily Treasury US Yield Curve Rates") %>%
hc_add_series(X[, symbols[1]], name = symbols[1]) %>%
hc_add_series(X[, symbols[2]], name = symbols[2]) %>%
hc_add_series(X[, symbols[3]], name = symbols[3]) %>%
hc_add_series(X[, symbols[4]], name = symbols[4]) %>%
hc_add_series(X[, symbols[5]], name = symbols[5]) %>%
hc_add_series(X[, symbols[6]], name = symbols[6]) %>%
hc_add_series(X[, symbols[8]], name = symbols[8]) %>%
hc_add_series(X[, symbols[9]], name = symbols[9]) %>%
hc_add_series(X[, symbols[10]], name = symbols[10]) %>%
hc_add_series(X[, symbols[11]], name = symbols[11]) %>%
hc_add_theme(hc_theme_flat()) %>%
hc_navigator(enabled = FALSE) %>%
hc_scrollbar(enabled = FALSE) %>%
hc_exporting(enabled = TRUE) %>%
hc_legend(enabled = TRUE)
X_dm <- scale(X, center = TRUE)
V <- cov(X_dm)
W <- eigen(V)$vectors
L <- eigen(V)$values
L <- diag(L)
n <- dim(W)[2] #11
w <- rep("w",n)
series <- seq(1:n)
w <- lapply(w, paste, series, sep = "")[[1]]
colnames(W) <- w
P_dm <- X_dm %*% L
PC <- rep("PC",n)
PC <- lapply(PC, paste, series, sep = "")[[1]]
colnames(P_dm) <- PC
# select first three principal components
P3 <- P_dm[,c(1:3)]
W3 <- W[,c(1:3)]
X3 <- xts(P3%*%t(W3), dates)*(-1)
colnames(X3) <- colnames(P_dm)
highchart(type = "stock") %>%
hc_title(text = "Principal Component Representation") %>%
hc_add_series(X3[, PC[1]], name = PC[1]) %>%
hc_add_series(X3[, PC[2]], name = PC[2]) %>%
hc_add_series(X3[, PC[3]], name = PC[3]) %>%
hc_add_series(X3[, PC[4]], name = PC[4]) %>%
hc_add_series(X3[, PC[5]], name = PC[5]) %>%
hc_add_series(X3[, PC[6]], name = PC[6]) %>%
hc_add_series(X3[, PC[8]], name = PC[8]) %>%
hc_add_series(X3[, PC[9]], name = PC[9]) %>%
hc_add_series(X3[, PC[10]], name = PC[10]) %>%
hc_add_series(X3[, PC[11]], name = PC[11]) %>%
hc_add_theme(hc_theme_flat()) %>%
hc_navigator(enabled = FALSE) %>%
hc_scrollbar(enabled = FALSE) %>%
hc_exporting(enabled = TRUE) %>%
hc_legend(enabled = TRUE)
rownames(W3) <- colnames(X)
W3
df <- stack(list(w1 = W3[,1], w2 = W3[,2], w3 = W3[,3]))
head(df)
colnames(df) <- c("EigenvectorValue", "Type")
df$Maturity <- colnames(X)
ggplot(df, aes(x = Maturity, y = EigenvectorValue, colour = Type, group = Type)) +
geom_line() +
scale_x_discrete(limits = colnames(X)) +
geom_point()
yield <- X
yield$SIGN_DIFF <- X[,dim(X)[2]] - X[,1]
yield$INVERTED <- ifelse(yield$SIGN_DIFF < 0, 1, 0)
inverted <- subset(yield, yield$INVERTED == 1)
extreme_inverted <- subset(inverted, inverted$SIGN_DIFF == min(inverted$SIGN_DIFF))
extreme_inverted <- extreme_inverted[,1:11]
yield$UPWARD <- ifelse(yield$SIGN_DIFF > 0, 1, 0)
upward <- subset(yield, yield$UPWARD == 1)
extreme_upward <- subset(upward, upward$SIGN_DIFF == max(upward$SIGN_DIFF))
extreme_upward <- extreme_upward[,1:11]
yield$FLAT <- ifelse(yield$SIGN_DIFF == 0, 1, 0)
flat <- subset(yield, yield$FLAT == 1)
extreme_flat <- flat[sample(index(flat),1),1:11]
df_2 <- cbind(t(extreme_inverted), t(extreme_upward), t(extreme_flat))
row.names(df_2) <- colnames(X)
df_2
str(df_2)
df_3 <- stack(list("2006-11-28" = df_2[,1], "2010-01-11" = df_2[,2], "2007-07-24" = df_2[,3]))
colnames(df_3) <- c("Yield", "Day")
df_3$Maturity <- colnames(X)
df_3
ggplot(df_3, aes(x = Maturity, y = Yield, colour = Day, group = Day)) +
geom_line() +
scale_x_discrete(limits = colnames(X)) +
geom_point() +
labs(x = "Time to Maturity", y = "Yield (%)")
price <- seq(0,4000,100)
price
price <- seq(0,4000,5,)
price <- seq(0,4000,5)
price
yield <- seq(0, 20, 0.5)
yield
rm(list = ls())
options(scipen = 5)
library(Quandl)
library(quantmod)
library(stringr)
library(highcharter)
library(xts)
library(ggplot2)
getwd()
Quandl.api_key("GUrWGm_WBRvxKPUUTCcZ")
X <- Quandl("USTREASURY/YIELD", type = "xts")
# remove 2 MO and start from 2006 where 30 MO is reintroduced
X <- na.omit(X["2006-02-09/",-2])
head(X)
dates <- index(X)
symbols <- colnames(X)
symbols <- lapply(symbols, str_replace, patter = " ", repl = "")
symbols_2 <- NULL
for(i in symbols) {
symbols_2 <- c(symbols_2, paste("MAT", i, sep = ""))
}
#symbols <- lapply(symbols_2, str_replace, patter = " ", repl = "")
symbols <- as.vector(unlist(symbols))
dimnames(X)[[2]] <- symbols
colnames(X)
highchart(type = "stock") %>%
hc_title(text = "Daily Treasury US Yield Curve Rates") %>%
hc_add_series(X[, symbols[1]], name = symbols[1]) %>%
hc_add_series(X[, symbols[2]], name = symbols[2]) %>%
hc_add_series(X[, symbols[3]], name = symbols[3]) %>%
hc_add_series(X[, symbols[4]], name = symbols[4]) %>%
hc_add_series(X[, symbols[5]], name = symbols[5]) %>%
hc_add_series(X[, symbols[6]], name = symbols[6]) %>%
hc_add_series(X[, symbols[8]], name = symbols[8]) %>%
hc_add_series(X[, symbols[9]], name = symbols[9]) %>%
hc_add_series(X[, symbols[10]], name = symbols[10]) %>%
hc_add_series(X[, symbols[11]], name = symbols[11]) %>%
hc_add_theme(hc_theme_flat()) %>%
hc_navigator(enabled = FALSE) %>%
hc_scrollbar(enabled = FALSE) %>%
hc_exporting(enabled = TRUE) %>%
hc_legend(enabled = TRUE)
X_dm <- scale(X, center = TRUE)
V <- cov(X_dm)
W <- eigen(V)$vectors
L <- eigen(V)$values
L <- diag(L)
n <- dim(W)[2] #11
w <- rep("w",n)
series <- seq(1:n)
w <- lapply(w, paste, series, sep = "")[[1]]
colnames(W) <- w
P_dm <- X_dm %*% L
PC <- rep("PC",n)
PC <- lapply(PC, paste, series, sep = "")[[1]]
colnames(P_dm) <- PC
# select first three principal components
P3 <- P_dm[,c(1:3)]
W3 <- W[,c(1:3)]
X3 <- xts(P3%*%t(W3), dates)*(-1)
colnames(X3) <- colnames(P_dm)
highchart(type = "stock") %>%
hc_title(text = "Principal Component Representation") %>%
hc_add_series(X3[, PC[1]], name = PC[1]) %>%
hc_add_series(X3[, PC[2]], name = PC[2]) %>%
hc_add_series(X3[, PC[3]], name = PC[3]) %>%
hc_add_series(X3[, PC[4]], name = PC[4]) %>%
hc_add_series(X3[, PC[5]], name = PC[5]) %>%
hc_add_series(X3[, PC[6]], name = PC[6]) %>%
hc_add_series(X3[, PC[8]], name = PC[8]) %>%
hc_add_series(X3[, PC[9]], name = PC[9]) %>%
hc_add_series(X3[, PC[10]], name = PC[10]) %>%
hc_add_series(X3[, PC[11]], name = PC[11]) %>%
hc_add_theme(hc_theme_flat()) %>%
hc_navigator(enabled = FALSE) %>%
hc_scrollbar(enabled = FALSE) %>%
hc_exporting(enabled = TRUE) %>%
hc_legend(enabled = TRUE)
rownames(W3) <- colnames(X)
W3
df <- stack(list(w1 = W3[,1], w2 = W3[,2], w3 = W3[,3]))
head(df)
colnames(df) <- c("EigenvectorValue", "Type")
df$Maturity <- colnames(X)
ggplot(df, aes(x = Maturity, y = EigenvectorValue, colour = Type, group = Type)) +
geom_line() +
scale_x_discrete(limits = colnames(X)) +
geom_point()
##########################################################
yield <- X
yield$SIGN_DIFF <- X[,dim(X)[2]] - X[,1]
yield$INVERTED <- ifelse(yield$SIGN_DIFF < 0, 1, 0)
inverted <- subset(yield, yield$INVERTED == 1)
extreme_inverted <- subset(inverted, inverted$SIGN_DIFF == min(inverted$SIGN_DIFF))
extreme_inverted <- extreme_inverted[,1:11]
yield$UPWARD <- ifelse(yield$SIGN_DIFF > 0, 1, 0)
upward <- subset(yield, yield$UPWARD == 1)
extreme_upward <- subset(upward, upward$SIGN_DIFF == max(upward$SIGN_DIFF))
extreme_upward <- extreme_upward[,1:11]
yield$FLAT <- ifelse(yield$SIGN_DIFF == 0, 1, 0)
flat <- subset(yield, yield$FLAT == 1)
extreme_flat <- flat[sample(index(flat),1),1:11]
df_2 <- cbind(t(extreme_inverted), t(extreme_upward), t(extreme_flat))
row.names(df_2) <- colnames(X)
df_2
str(df_2)
df_3 <- stack(list("2006-11-28" = df_2[,1], "2010-01-11" = df_2[,2], "2007-07-24" = df_2[,3]))
colnames(df_3) <- c("Yield", "Day")
df_3$Maturity <- colnames(X)
df_3
ggplot(df_3, aes(x = Maturity, y = Yield, colour = Day, group = Day)) +
geom_line() +
scale_x_discrete(limits = colnames(X)) +
geom_point() +
labs(x = "Time to Maturity", y = "Yield (%)") +
theme(legend.position="top")
ggplot(df_3, aes(x = Maturity, y = Yield, colour = Day, group = Day)) +
geom_line() +
scale_x_discrete(limits = colnames(X)) +
geom_point() +
labs(x = "Time to Maturity", y = "Yield (%)") +
theme(legend.position="top",
panel.background = element_rect(fill="lightblue"))
########### BIVARIATE COMBINATIONS #################
combs <- t(combn(1:dim(fin.stocks)[2],2))
rm(list=ls())
library(xts)
library(stringr)
library(tidyverse)
library(highcharter)
library(GGally)
dataraw <- read.csv("/Users/Andrea/__LSE_RISK/Data_project_adj_2.csv")
ids <- unique(dataraw[,1])
nAssets <- length(ids)
nObs <- nrow(dataraw)/nAssets
data <- matrix(NA, nrow = nObs, ncol = nAssets + 1)
data[,1] <- dataraw[dataraw[,1] == ids[1], "date"]
for (i in 1:nAssets){
data[,i+1]<-dataraw[dataraw[,1] == ids[i], "PRC"]
}
ticker <- as.character(unique(dataraw[,"TICKER"]))
dates <- as.Date(as.character(data[,1]), "%Y%m%d")
data <- data[,-1]
colnames(data) <- ticker
ts <- xts(data, dates)
#### prices ####
highchart(type = "stock") %>%
hc_title(text = "Prices") %>%
hc_add_series(ts[, ticker[1]], name = ticker[1]) %>%
hc_add_series(ts[, ticker[2]], name = ticker[2]) %>%
hc_add_series(ts[, ticker[3]], name = ticker[3]) %>%
hc_add_series(ts[, ticker[4]], name = ticker[4]) %>%
hc_add_series(ts[, ticker[5]], name = ticker[5]) %>%
hc_add_series(ts[, ticker[6]], name = ticker[6]) %>%
hc_add_series(ts[, ticker[8]], name = ticker[8]) %>%
hc_add_series(ts[, ticker[9]], name = ticker[9]) %>%
hc_add_series(ts[, ticker[10]], name = ticker[10]) %>%
hc_add_theme(hc_theme_flat()) %>%
hc_navigator(enabled = FALSE) %>%
hc_scrollbar(enabled = FALSE) %>%
hc_exporting(enabled = TRUE) %>%
hc_legend(enabled = TRUE)
ts["2008-09-15"]
sub_ts <- window(ts, startdate="2008-03-14",end="2009-01-20")
head(sub_ts)
tail(sub_ts)
first <- apply(sub_ts,2,first)
last <- apply(sub_ts,2,last)
((last-first)/first)*100
#### log returns and percentage returns ####
log_rts <- apply(ts, 2, quantmod::Delt, type = 'log')
net_rts <- apply(ts,2,quantmod::Delt,type = 'arithmetic')
head(log_rts)
head(net_rts)
#### Test for multivariate normality (Mardia) ####
normality_test <- MVN::mvn(data = log_rts, mvnTest = "mardia")
normality_test$multivariateNormality
normality_test <- MVN::mvn(data = log_rts[-1,], mvnTest = "mardia", multivariatePlot = "qq")
#### Test for marginal normality (Jarque - Bera) ####
JBTest <- function(dataMatrix){
ncol <- dim(dataMatrix)[2]
pvals <- array(NA, ncol)
for (i in 1:ncol) pvals[i] <- tseries::jarque.bera.test(dataMatrix[,i])$p.value
if (!is.null(names(dataMatrix))) names(pvals) <- names(dataMatrix)
return(pvals)
}
JBTest(log_rts[-1,])
apply(log_rts[-1,], 2, tseries::jarque.bera.test)
#### Test for marginal student t with 1 dgf ####
uniques <- apply(log_rts, 2, unique)
values_t_test <- vector(mode="list",length = dim(log_rts)[2])
for(i in 1:dim(log_rts)[2]){
values_t_test[[i]] <- ks.test(uniques[[i]], "pt", df = 1)
}
results_t_test <- list()
results_t_test[colnames(log_rts)] <- values_t_test
results_t_test
par(mfrow=c(3,4))
for(i in 1:dim(log_rts)[2]){
plot(qt(ppoints(log_rts[-1,i]),10), sort(log_rts[-1,i]),
main=str_c("Student-t QQ (dof=10) Plot for",
colnames(log_rts)[i],sep=" "),
xlab="Theoretical quantiles",ylab="Sample Quantiles")
abline(a=0,b=1)
}
#### FINANCIAL STOCKS ####
fin.stocks <- as.data.frame(log_rts[,c("BA","WFC","NTRS","AIG","MS","GS")])
fin.scatter <- ggpairs(fin.stocks,
lower = list(continuous = wrap("points", size = 0.1))) +
theme_bw() +
theme(panel.grid.major = element_blank(),
strip.text = element_text(face="bold", size=rel(0.60)),
plot.title=element_text(size = rel(1.1),
lineheight = .9,
family = "Helvetica",
face = "plain",
colour = "black",
hjust = 0.5)) +
ggtitle("Pair-wise Stock Returns Financial stocks")
head(fin.stocks)
#### Mardia test for combinations of bivariate distributions of stocks ####
combs <- t(combn(1:dim(fin.stocks)[2],2))
values <- vector(mode="list", length = dim(combs)[1])
names <- c()
for (i in 1:dim(combs)[1]) {
names[i] <- str_c(colnames(fin.stocks[,combs[i,]]), collapse="_")
values[[i]] <- MVN::mvn(fin.stocks[-1,combs[i,]],
mvnTest = "mardia")$multivariateNormality
}
results <- list()
results[names] <- values
results
#########################
######## COPULAS ########
#########################
# Semi-parametric estimation -> specify: method="mpl"
############# MULTIVARIATE COPULA OF DIMENSION 6 ##########
# Keep only the rows in which returns for each stock are different
# from zero.
cond <- apply(fin.stocks, 1, function(x) any(x == 0))
zero_index <- which(cond == TRUE)
fin.stocks <- fin.stocks[-zero_index,]
########### BIVARIATE COMBINATIONS #################
combs <- t(combn(1:dim(fin.stocks)[2],2))
#### BIVARIATE STUDENT T COPULA ####
values_biv_t_cop <- vector(mode="list", length = dim(combs)[1])
for (i in 1:dim(combs)[1]) {
values_biv_t_cop[[i]] <- fitCopula(tCopula(dim = 2, dispstr = "un"),
data = pseudo_obs[-1,combs[i,]],
method = "mpl")
}
library(QRM)
library(copula)
#### BIVARIATE STUDENT T COPULA ####
values_biv_t_cop <- vector(mode="list", length = dim(combs)[1])
for (i in 1:dim(combs)[1]) {
values_biv_t_cop[[i]] <- fitCopula(tCopula(dim = 2, dispstr = "un"),
data = pseudo_obs[-1,combs[i,]],
method = "mpl")
}
#### PSEUDO-OBSERVATIONS ####
#pseudo_obs <- apply(fin.stocks, 2, QRM::edf, adjust = 1)
pseudo_obs <- copula::pobs(fin.stocks)
########### BIVARIATE COMBINATIONS #################
combs <- t(combn(1:dim(fin.stocks)[2],2))
#### BIVARIATE STUDENT T COPULA ####
values_biv_t_cop <- vector(mode="list", length = dim(combs)[1])
for (i in 1:dim(combs)[1]) {
values_biv_t_cop[[i]] <- fitCopula(tCopula(dim = 2, dispstr = "un"),
data = pseudo_obs[-1,combs[i,]],
method = "mpl")
}
results_biv_t_cop <- list()
results_biv_t_cop[names] <- values_biv_t_cop
results_biv_t_cop
# Simulation of t Copula #
nObs <- 709
tNVar <- 6
cor.par <- 0.7
# dispersion matrix
tSigma <- (1-cor.par)*diag(tNVar)+array(cor.par,c(tNVar,tNVar))
t.dof <- 4
# multivariate dim 6 student t distribution
tData <- rmt(nObs,t.dof,mu=array(0,tNVar),tSigma)
head(tData)
tCopulaData <- apply(tData,2,pt,df=t.dof)
splom2(tCopulaData, cex = 0.2, col.mat = 'black', pch = 16)
setwd("/Users/Andrea/Desktop/LSE_documentazione/images")
png("simulated_bivariate_t_copula.png", units="mm",height = 210, width = 210, res=320 )
splom2(tCopulaData, cex = 0.2, col.mat = 'black', pch = 16)
dev.off()
# For displaying contour charts
distribution.limits <- c(0.01,0.99)
Sigma.contour <- equicorr(2,0.5)
threed.limits <- c(-3,3)
par(mfrow = c(3,3))
for (i in 1:6){
hist(tCopulaData[,i])
}
par(mfrow = c(1,2))
BiDensPlot(func=dcopula.t,xpts=distribution.limits,ypts=distribution.limits,
df=t.dof,Sigma=Sigma.contour, type = 'contour')
BiDensPlot(func=dcopula.t,xpts=distribution.limits,ypts=distribution.limits,
df=t.dof,Sigma=Sigma.contour, type = 'persp',npts=15)
Sigma.contour <- equicorr(2,0.7)
tSigma
# For displaying contour charts
distribution.limits <- c(0.01,0.99)
Sigma.contour <- equicorr(2,0.7)
threed.limits <- c(-3,3)
par(mfrow = c(3,3))
for (i in 1:6){
hist(tCopulaData[,i])
}
par(mfrow = c(1,2))
t.dof
BiDensPlot(func=dcopula.t,xpts=distribution.limits,ypts=distribution.limits,
df=t.dof,Sigma=Sigma.contour, type = 'contour')
BiDensPlot(func=dcopula.t,xpts=distribution.limits,ypts=distribution.limits,
df=t.dof,Sigma=Sigma.contour, type = 'persp',npts=15)
Sigma.contour <- equicorr(2,0.5)
threed.limits <- c(-3,3)
par(mfrow = c(3,3))
for (i in 1:6){
hist(tCopulaData[,i])
}
par(mfrow = c(1,2))
BiDensPlot(func=dcopula.t,xpts=distribution.limits,ypts=distribution.limits,
df=t.dof,Sigma=Sigma.contour, type = 'contour')
BiDensPlot(func=dcopula.t,xpts=distribution.limits,ypts=distribution.limits,
df=t.dof,Sigma=Sigma.contour, type = 'persp',npts=15)
# For displaying contour charts
distribution.limits <- c(0.01,0.99)
Sigma.contour <- equicorr(2,0.6)
threed.limits <- c(-3,3)
par(mfrow = c(3,3))
for (i in 1:6){
hist(tCopulaData[,i])
}
par(mfrow = c(1,2))
BiDensPlot(func=dcopula.t,xpts=distribution.limits,ypts=distribution.limits,
df=t.dof,Sigma=Sigma.contour, type = 'contour')
BiDensPlot(func=dcopula.t,xpts=distribution.limits,ypts=distribution.limits,
df=t.dof,Sigma=Sigma.contour, type = 'persp',npts=15)
# For displaying contour charts
distribution.limits <- c(0.01,0.99)
Sigma.contour <- equicorr(2,0.5)
threed.limits <- c(-3,3)
par(mfrow = c(3,3))
for (i in 1:6){
hist(tCopulaData[,i])
}
par(mfrow = c(1,2))
BiDensPlot(func=dcopula.t,xpts=distribution.limits,ypts=distribution.limits,
df=t.dof,Sigma=Sigma.contour, type = 'contour')
BiDensPlot(func=dcopula.t,xpts=distribution.limits,ypts=distribution.limits,
df=t.dof,Sigma=Sigma.contour, type = 'persp',npts=15)
Sigma.contour <- equicorr(2,0.7)
threed.limits <- c(-3,3)
par(mfrow = c(3,3))
for (i in 1:6){
hist(tCopulaData[,i])
}
par(mfrow = c(1,2))
BiDensPlot(func=dcopula.t,xpts=distribution.limits,ypts=distribution.limits,
df=t.dof,Sigma=Sigma.contour, type = 'contour')
BiDensPlot(func=dcopula.t,xpts=distribution.limits,ypts=distribution.limits,
df=t.dof,Sigma=Sigma.contour, type = 'persp',npts=15)
png("t_copula_contour.png", units="mm",height = 210, width = 210, res=320 )
BiDensPlot(func=dcopula.t,xpts=distribution.limits,ypts=distribution.limits,
df=t.dof,Sigma=Sigma.contour, type = 'contour')
dev.off()
png("persp_t_copula.png", units="mm",height = 210, width = 210, res=320 )
BiDensPlot(func=dcopula.t,xpts=distribution.limits,ypts=distribution.limits,
df=t.dof,Sigma=Sigma.contour, type = 'persp',npts=15)
dev.off()
